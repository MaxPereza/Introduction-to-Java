package programming_exercises;

import java.util.Scanner;

public class PE_8_08_AllClosestPairs_ofPoints {
	public static void main(String[] args) {
		 Scanner input = new Scanner(System.in);
		 System.out.print("Enter the number of points: "); 
		 int numberOfPoints = input.nextInt(); 
		 // Create an array to store points
		 double[][] points = new double[numberOfPoints][2];		 
		 System.out.print("Enter " + numberOfPoints + " points: ");
		 for (int i = 0; i < points.length; i++) {
			 points[i][0] = input.nextDouble();
			 points[i][1] = input.nextDouble();
			 }
		 input.close();
		 // p1 and p2 are the indices in the points' array
		 
		 int [][] pairsOfpoints = new int [12][2];//there can be maximum only 12 pairs of points with the same distance   
		 int count =0;
		 double shortestDistance = 999999999;
		 // Compute distance for every two points
		 for (int i = 0; i < points.length; i++) {
			 for (int j = i + 1; j < points.length; j++) {
				 double distance = distance(points[i][0], points[i][1], points[j][0], points[j][1]);
				 // Find distance 27 28          
				 if (shortestDistance > distance) {
					 count=0;
					 pairsOfpoints [count][0] =  i; // Update point 1
					 pairsOfpoints [count][1] =  j; // Update point 2
					 shortestDistance = distance; // Update shortestDistance
					 }
				 else if(shortestDistance == distance)
				 {
					 count++;
					 pairsOfpoints [count][0] =  i;
					 pairsOfpoints [count][1] =  j;
				 }
				 }
			 }
		 
		 for(int i=0; i <= count; i++)
		 {
			 int p1 = pairsOfpoints [i][0];
			 int p2 = pairsOfpoints [i][1]; 
			 System.out.println("The closest two points are " + "(" + points[p1][0] + ", " + points[p1][1] + ") and (" + 
					 points[p2][0] + ", " + points[p2][1] + ")");			 
		 }
		 System.out.println("Their distance is "+ shortestDistance);
			  
		 }
	 /** Compute the distance between two points (x1, y1) and (x2, y2)*/ 
	 public static double distance(double x1, double y1, double x2, double y2) {
		 return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
		 } 	
}

/*{{0,1},
{0,0},
{1,0},
{-1,0},
    {0,-1},
    {-1, 1},
    {1, 1},
    {1, -1},
    {-1,-1}};*/
