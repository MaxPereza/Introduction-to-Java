package pe_10_12;
import pe_10_04.MyPoint;
public class Triangle2D {
	private MyPoint p1;
	private MyPoint p2;
	private MyPoint p3;
	
	Triangle2D(){
		this(new MyPoint(0,0),new MyPoint (1,1), new MyPoint(2,5));
	}
	
	Triangle2D(MyPoint p1, MyPoint p2, MyPoint p3) {
		this.p1 = p1;
		this.p2 = p2;
		this.p3 = p3;
	}
	
	public void setPointP1(MyPoint p1){
		this.p1 = p1;}
	
	public MyPoint getPointP1() {
		return p1;	}
	
	public void setPointP2(MyPoint p2) {
		this.p2 = p2;}
	
	public MyPoint getPointP2() {
		return p2;}
	
	public void setPointP3(MyPoint p3) {
		this.p3 = p3;}
	
	public MyPoint getPointP3() {
		return p3;}
	
	public double getArea() {
		double [] sides = new double [3];
		sides[0] = MyPoint.distance(p1, p2);
		sides[1] = MyPoint.distance(p1, p3);
		sides[2] = MyPoint.distance(p2, p3);
		double s = (sides[0]+sides[1]+sides[2])/2;
		double area = Math.sqrt((s*(s - sides[0])*(s - sides[1])*(s - sides[2])));
		return area;
	}
	
	public double getPerimeter() {
		double [] sides = new double [3];
		sides[0] = MyPoint.distance(p1, p2);
		sides[1] = MyPoint.distance(p1, p3);
		sides[2] = MyPoint.distance(p2, p3);
		double s = (sides[0]+sides[1]+sides[2]);
		return s;
	}
	
	public boolean contains(MyPoint p) {
		double a = (p1.getX() - p.getX()) *(p2.getY()-p1.getY()) - (p2.getX()-p1.getX()) * (p1.getY() - p.getY());
		double b = (p2.getX() - p.getX()) *(p3.getY() - p2.getY()) -(p3.getX() - p2.getX()) * (p2.getY() - p.getY());
		double c = (p3.getX() - p.getX()) * (p1.getY() - p3.getY()) - (p1.getX() - p3.getX()) *(p3.getY()- p.getY());
		return  a>=0&&b>=0&&c>=0 || a<=0&&b<=0&&c<=0;		
	}
	
	public boolean contains(Triangle2D t)	{
		return (contains(t.p1)&&contains(t.p2)&&contains(t.p3));			
	}
	
	public boolean overlaps(Triangle2D t) {
		if (getIntersectingPoint(this.p1, this.p2, t.p1, t.p2)!=null)
			return true;
		else if(getIntersectingPoint(this.p1, this.p2, t.p1, t.p3)!=null)
			return true;
		else if(getIntersectingPoint(this.p1, this.p2, t.p2, t.p3)!=null)
			return true;
		else if(getIntersectingPoint(this.p1, this.p3, t.p1, t.p2)!=null)
			return true;
		else if(getIntersectingPoint(this.p1, this.p3, t.p1, t.p3)!=null)
			return true;
		else if(getIntersectingPoint(this.p1, this.p3, t.p2, t.p3)!=null)
			return true;
		else if(getIntersectingPoint(this.p2, this.p3, t.p1, t.p2)!=null)
			return true;
		else if(getIntersectingPoint(this.p2, this.p3, t.p1, t.p3)!=null)
			return true;
		else if(getIntersectingPoint(this.p2, this.p3, t.p2, t.p3)!=null)
			return true;
		else
			return false;
	}
	
	private static double[] getIntersectingPoint(MyPoint pA, MyPoint pB, MyPoint pC, MyPoint pD) {
        double a = pA.getY() - pB.getY(); // y1 - y2
        double b = -(pA.getX() - pB.getX());//-(x1 - x2)
        double c = pC.getY() - pD.getY(); //y3 - y4
        double d = -(pC.getX() - pD.getX());//-(x3 - x4)
        double e = a * pA.getX() + b * pA.getY();  // (y1 - y2) * x1 - (x1 - x2) * y1
        double f = c * pC.getX() + d* pC.getY(); // (y3 - y4) * x3 - (x3 - x4) * y3
        double determinant = (a * d) - (b * c);
        if (determinant == 0) return null;
        else {
            double x = (e * d - b * f) / determinant;
            double y = (a * f - e * c) / determinant;
            return new double[]{x, y};
        }
    }	
}
package pe_10_12;
import pe_10_04.MyPoint;
public class TestTriangle {
	public static void main (String [] args)
	{
		Triangle2D a = new Triangle2D(new MyPoint (2.5, 2),
				new MyPoint(5, -1.0),
				new MyPoint (4.0, 2.0));
		System.out.printf("Area Triangle A is %.3f and Perimeter %.3f" , a.getArea(), a.getPerimeter());
		Triangle2D b = new Triangle2D(new MyPoint (1.5, -3.4),
				new MyPoint(4.6, 5),
				new MyPoint (9.5, -3.4));
		System.out.printf("\nArea Triangle A is %.3f and Perimeter %.3f" , b.getArea(), b.getPerimeter());
		Triangle2D c = new Triangle2D(new MyPoint (0, 0),
				new MyPoint(0, 100),
				new MyPoint (200, 0));
		System.out.println("\nPoint (100.5, 25.5) is inside the triangle? " + c.contains(new MyPoint(100.5, 25.5))); 
		System.out.println("Point (100.5, 50.5) is inside the triangle? " + c.contains(new MyPoint(100.5, 50.5)));
		Triangle2D t1 = new Triangle2D(new MyPoint(2.5, 2), new MyPoint(4.2, 3),new MyPoint(5, 3.5));
		System.out.println("T1 contain new triangle ? " +t1.contains(new Triangle2D(new MyPoint(2.9, 2), new MyPoint(4, 1), new MyPoint(1, 3.4))));
		System.out.println("C contain new triangle ? " +c.contains(new Triangle2D(new MyPoint(1, 1), new MyPoint(0, 75), new MyPoint(200, 0))));
		System.out.println("Overlaps t1? "+ t1.overlaps(new Triangle2D(new MyPoint(2, 5.5), new MyPoint (4, -3),new MyPoint(2, 6.5))));
	}
}
