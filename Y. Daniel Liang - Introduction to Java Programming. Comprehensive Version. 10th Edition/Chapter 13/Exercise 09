package pe_13_01;

public abstract class GeometricObject {
	private String color = "white";
	private boolean filled;
	private java.util.Date dateCreated;
	
	/** Construct a default geometric object */
	protected GeometricObject() {
	dateCreated = new java.util.Date();
	}
	
	/** Construct a geometric object with color and filled value */
	protected GeometricObject(String color, boolean filled) {
	dateCreated = new java.util.Date();
	this.color = color;
	this.filled = filled;
	}
	
	/** Return color */
	public String getColor() {
	return color;
	}
	
	/** Set a new color */
	public void setColor(String color) {
	this.color = color;
	}
	
	/** Return filled. Since filled is boolean, the getter method is named isFilled */
	public boolean isFilled() {
	return filled;
	}
	/** Set a new filled */
	public void setFilled(boolean filled) {
	this.filled = filled;
	}
	/** Get dateCreated */
	public java.util.Date getDateCreated() {
	return dateCreated;
	}
	@Override
	public String toString() {
	return "created on " + dateCreated + "\ncolor: " + color +
	" and filled: " + filled;
	}
	
	/** Abstract method getArea */
	public abstract double getArea();
	
	/** Abstract method getPerimeter */
	public abstract double getPerimeter();
}

package pe_13_09;

import pe_13_01.GeometricObject;

public class EnableCircleComparable extends GeometricObject
implements  Comparable<EnableCircleComparable> {
	 private double radius;
	 
	 public EnableCircleComparable() {
	 }
	 
	 public EnableCircleComparable(double radius) {
	 this.radius = radius;
	 }
	
	 public EnableCircleComparable(double radius,
	 String color, boolean filled) {
	 this.radius = radius;
	 setColor(color);
	 setFilled(filled);
	}
	 /** Return radius */
	 public double getRadius() {
	 return radius;
	 }
	 
	 /** Set a new radius */
	 public void setRadius(double radius) {
	 this.radius = radius;
	 }
	 
	 /** Return area */
	 @Override 
	 public double getArea() {
	 return radius * radius * Math.PI;
	 }
	 
	 /** Return diameter */
	 public double getDiameter() {
	 return 2 * radius;
	 }
	 
	 /** Return perimeter */
	 @Override 
	 public double getPerimeter() {
	 return 2 * radius * Math.PI;
	 }
	 
	 /** Print the circle info */
	 @Override 
	 public String toString() {
			return "Radius: " + radius;
		}
	 
	// object comparison
		@Override
		public int compareTo(EnableCircleComparable o) {
			return this.equals(o)? 0:(this.radius > o.radius )? 1 : -1;				
			}
	 
	 @Override // Override the equals method in the Object class
	 public boolean equals(Object o){
	        return o instanceof EnableCircleComparable && this.radius == ((EnableCircleComparable) o).radius;
	    }	 
}

package pe_13_09;

class TestCircle {
	public static void main(String []args) {
		EnableCircleComparable circle1 = new EnableCircleComparable(5);
		EnableCircleComparable circle2 = new EnableCircleComparable(5);
		System.out.println("Are these two circles equal? " + circle1.equals(circle2));
		System.out.println("Are these two circles equal? " + circle1.compareTo(circle2));
		circle2.setRadius(6);
		System.out.println("Are these two circles equal? " + circle1.equals(circle2));
		System.out.println("Is circle1 bigger then circle2 ? " + circle1.compareTo(circle2));
		circle1.setRadius(7);
		System.out.println("Is circle1 bigger then circle2 ? " + circle1.compareTo(circle2));
	}
}
