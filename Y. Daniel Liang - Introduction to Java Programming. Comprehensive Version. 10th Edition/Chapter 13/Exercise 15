package pe_13_15;
import java.math.BigInteger;
import java.util.Scanner;

public class TestBigIntegerRational {
	public static void main(String []args) {
		System.out.print("Enter the first rational number: ");
		Scanner input = new Scanner(System.in);
		BigInteger [] firstRNumber = getNumber(input);
		System.out.print("Enter the second rational number: ");
		BigInteger [] secondRNumber = getNumber(input);
		input.close();
		
		RationalBigInteger num1 = new RationalBigInteger(firstRNumber[0],firstRNumber[1] );
		RationalBigInteger num2 = new RationalBigInteger(secondRNumber[0],secondRNumber[1] );
		
		System.out.println(num1+" - " +num2 +" = "+num1.subtract(num2).toString());
		System.out.println(num1+" + " +num2 +" = "+num1.add(num2).toString());
		System.out.println(num1+" * " +num2 +" = "+num1.multiply(num2).toString());
		System.out.println(num1+" / " +num2 +" = "+num1.divide(num2).toString());
		System.out.println(num2+ " is "+ num2.doubleValue());
	}
	
	public static BigInteger [] getNumber(Scanner input){
		String number = input.nextLine();		
		BigInteger [] rNumber = new BigInteger [2];
		try(Scanner line = new Scanner(number)) {		
			for(int i =0; i < 2; i++){
				String num = line.next();
				rNumber[i] = new BigInteger (num);	
				}			
		}
	
		catch(Exception ex) {
			System.out.print("Wrong number: " +ex.getMessage()+", try again: ");
			rNumber = getNumber(input);			
			}						
		return rNumber;	
	}
}

package pe_13_15;
import java.math.BigInteger;

public class RationalBigInteger extends Number implements Comparable<RationalBigInteger>{
	// Data fields for numerator and denominator
	private static final int NUMERATOR = 0;
    private static final int DENOMINATOR = 1;
	private BigInteger[] r = new BigInteger[2];
		
	/** Construct a rational with default properties */
	public RationalBigInteger() {
	this(BigInteger.ZERO, BigInteger.ONE);
	}
	/** Construct a rational with specified numerator and denominator */
	public RationalBigInteger(BigInteger numerator, BigInteger denominator) {
		BigInteger gcd = gcd(numerator, denominator);
		r[NUMERATOR ] = (denominator.compareTo(new BigInteger("0")) > 0? new BigInteger("1"): new BigInteger("-1")).multiply( numerator.divide(gcd));
		r[DENOMINATOR] = denominator.abs().divide(gcd);
		
	}
	
	/** Find GCD of two numbers */
	private static BigInteger gcd(BigInteger n, BigInteger d) {
	BigInteger n1 = n.abs();
	//System.out.println("n1" + n1.toString());
	BigInteger n2 = d.abs();
	//System.out.println("n2" + n2.toString());
	BigInteger gcd = BigInteger.ONE;
	
	
	for (BigInteger k = BigInteger.ONE; k.compareTo(n1)<=0 && k.compareTo(n2) <= 0; k=k.add(BigInteger.ONE)) {
		//System.out.println("K " + k );
		if (n1.divideAndRemainder(k)[1].equals(BigInteger.ZERO) && n2.divideAndRemainder(k)[1].equals(BigInteger.ZERO)) 
			gcd = k;		
		}
	return gcd;
	}
	
	/** Return numerator */
	public BigInteger getNumerator() {
	return r[NUMERATOR];
	}
	
	/** Return denominator */
	public BigInteger getDenominator() {
	return r[DENOMINATOR];
	}
	/** Subtract a rational number from this rational */
	public RationalBigInteger subtract(RationalBigInteger secondRational) {
	BigInteger n = (r[NUMERATOR].multiply(secondRational.getDenominator())).subtract(
			r[DENOMINATOR].multiply(secondRational.getNumerator()));
	BigInteger d = r[DENOMINATOR].multiply(secondRational.getDenominator());
	return new RationalBigInteger(n, d);
	}
	/*
	/** Add a rational number to this rational */
	
	public RationalBigInteger add(RationalBigInteger secondRational) {
	BigInteger n = (r[NUMERATOR].multiply(secondRational.getDenominator())).add(r[DENOMINATOR].multiply(secondRational.getNumerator()));
	BigInteger d = r[DENOMINATOR].multiply(secondRational.getDenominator());
	return new RationalBigInteger(n, d);
	}
	/** Multiply a rational number by this rational */
	public RationalBigInteger multiply(RationalBigInteger secondRational) {
	BigInteger n = r[NUMERATOR].multiply(secondRational.getNumerator());
	BigInteger d = r[DENOMINATOR].multiply(secondRational.getDenominator());
	return new RationalBigInteger(n, d);
	}
	
	/** Divide a rational number by this rational */
	public RationalBigInteger divide(RationalBigInteger secondRational) {
	BigInteger n = r[NUMERATOR].multiply(secondRational.getDenominator());
	BigInteger d = r[DENOMINATOR].multiply(secondRational.getNumerator());
	return new RationalBigInteger(n, d);
	}
	
	@Override
	public String toString() {
		if (r[NUMERATOR].equals(BigInteger.ZERO) || r[DENOMINATOR].equals(BigInteger.ONE))
		    return r[NUMERATOR] + "";
		else 
		    return r[NUMERATOR] + "/" + r[DENOMINATOR];
	}
	
	@Override // Override the equals method in the Object class
	public boolean equals(Object other) {
		return  ((this.subtract((RationalBigInteger)(other))).getNumerator().equals(BigInteger.ZERO));		
	}
	
	@Override // Implement the abstract intValue method in Number
	public int intValue() {
	return (int)doubleValue();
	}
	
	@Override // Implement the abstract floatValue method in Number
	public float floatValue() {
	return (float)doubleValue();
	}
	
	@Override // Implement the doubleValue method in Number
	public double doubleValue() {
		return	r[NUMERATOR].doubleValue() / r[DENOMINATOR].doubleValue();
		
	}
	
	@Override // Implement the abstract longValue method in Number
	public long longValue() {
	return (long)doubleValue();
	}
	
	@Override // Implement the compareTo method in Comparable
	public int compareTo(RationalBigInteger o) {
		if (this.subtract(o).getNumerator().compareTo(BigInteger.ZERO) > 0)
            return 1;
        else if (this.subtract(o).getNumerator().compareTo(BigInteger.ZERO) < 0)
            return -1;
        else
            return 0;
    }
}
